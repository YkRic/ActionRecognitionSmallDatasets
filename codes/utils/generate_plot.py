#!/usr/bin/python
#-*- coding: utf-8 -*-

import sys
sys.path.insert(0, '..')
import argparse
import matplotlib.pyplot as plt
import numpy as np
from os.path import dirname, basename, realpath


def read_acc(acc, line):
    
    if 'Lr:0.005' in line:
        acc[0] = line.split()[-1].split(':')[-1]

    elif 'Lr:0.001' in line:
        acc[1] = line.split()[-1].split(':')[-1]
        
    elif 'Lr:0.0005' in line:
        acc[2] = line.split()[-1].split(':')[-1]
        
    elif 'Lr:0.0001' in line:
        acc[3] = line.split()[-1].split(':')[-1]
        
    elif 'Lr:5e-05' in line:
        acc[4] = line.split()[-1].split(':')[-1]

    elif 'Lr:1e-05' in line:
        acc[5] = line.split()[-1].split(':')[-1]

    return acc


def prepare_plot(acc, title, path):
    
    LR = ['5e-03', '1e-03', '5e-04', '1e-04', '5e-05', '1e-05']

    X = np.arange(6)
    Y = acc[0]
    width = 0.7
    fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(11,6))
    st = fig.suptitle(title, fontsize="x-large")

    k=0
    for i in range(0,2):
        for j in range(0,2):
            #print acc[k]
            rects = ax[i][j].bar(X, acc[k], width, color='skyblue')
            ax[i][j].set_ylim(0., 1.)
            ax[i][j].set_xticklabels(np.hstack(([0], LR)))
            k+=1

    ax[0][0].axes.get_xaxis().set_visible(False)
    ax[0][1].axes.get_xaxis().set_visible(False)

    ax[0][1].axes.get_yaxis().set_visible(False)
    ax[1][1].axes.get_yaxis().set_visible(False)

    ax[0][0].set_title('Drop 0.50')
    ax[0][1].set_title('Drop 0.70')
    ax[1][0].set_title('Drop 0.90')
    ax[1][1].set_title('Drop 0.95')

    ax[1][1].set_xlabel('Learning Rate')
    ax[1][0].set_xlabel('Learning Rate')
    ax[0][0].set_ylabel('Accuracy')
    ax[1][0].set_ylabel('Accuracy')

    fig.savefig(path+title+'-plot.pdf')

    print('Done!')



def plot(report, title):

    dir_path = dirname(report)+'/'
    drop_50_acc = [None] * 6
    drop_70_acc = [None] * 6
    drop_90_acc = [None] * 6
    drop_95_acc = [None] * 6
    acc = []

    with open(report) as r:
        for line in r:
            if 'Model' in line and not 'Best' in line:            

                 if 'Dropout:0.5' in line:
                    drop_50_acc = read_acc(drop_50_acc, line)

                 if 'Dropout:0.7' in line:
                    drop_70_acc = read_acc(drop_70_acc, line)               

                 if 'Dropout:0.9 ' in line:
                    drop_90_acc = read_acc(drop_90_acc, line)

                 if 'Dropout:0.95 ' in line:
                    drop_95_acc = read_acc(drop_95_acc, line)

    acc = [drop_50_acc, drop_70_acc, drop_90_acc, drop_95_acc]
    #print acc
    prepare_plot(acc, title, dir_path)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument('report_file', metavar='report',
                        help='file containing the report generated by the script generate_report.py.')
    parser.add_argument('plot_title', metavar='title',
                        help='Title that you wish to have in the plot.')
    args = parser.parse_args()

    plot(args.report_file, args.plot_title)
